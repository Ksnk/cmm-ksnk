//****************************************************************
// имитатор периодической нагрузки в ќ—. ћожно запускать несколько 
// скриптов “ќЋ№ ќ в случае, если BASE и MOD в них не пересекаютс€!
//
//  лон скрипта SPEED.cmm. »спользует два модул€ дл€ 
// периодического прогона разнокалиберных сообщений.
// - инициируетс€ передача WAVE сообщений из модул€ BASE в модуль MOD, 
//   длина каждого сообщени€ - LENGTH, после чего, через врем€ TIME 
//   передача сообщений останавливаетс€, счетчик прин€тых сообщени выводитс€.
// каждый оператор "include speed.inc" вызывает один акт тестировани€
// после прогона всех - переход на начало теста и - по новой.

//**************** выбор пары модулей дл€ тестировани€************
//base := $21; mod := $41 ;
//base := $20; mod := $40 ; mod2 := $41 ;
base := $01; mod := $20 ; mod2 := $42 ;
//base := $20; mod := $21 ;
//base := $30; mod := $03 ;
//base := $40; mod := $42 ;
//base := $40; mod := $41 ;
//base := $42; mod := $43 ;
//base := $04; mod := $74 ; mod2 := $76;  

//**************** выбор времени одного акта тестировани€*********
time := 5 ;
//**************** выбор длины сообщений**************************
Length:=1;


//**************** поехали!
writeln ('base', base);
SetMask($B);
SendMess(Base*256,$ff01,2,$100+($FF*2),$1b0);
recvMess(a,b,c,d,e,MainSeg);
ModX := Mod ;
again:
Mod := ModX; 
wave := 1  ;   include speed.inc ;
//wave := 20  ;   include speed.inc ;
wave := 1  ;  Mod := Mod2; include speed.inc ;
//wave := 20  ;   include speed.inc ;


delay (10000); // столько времени ждем перед началом следующей попытки
goto again; 
fin:
